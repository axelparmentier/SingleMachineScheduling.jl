var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#Docstrings","page":"API","title":"Docstrings","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SingleMachineScheduling]","category":"page"},{"location":"api/#SingleMachineScheduling.Instance1_rj_sumCj","page":"API","title":"SingleMachineScheduling.Instance1_rj_sumCj","text":"struct Instance1_rj_sumCj{T} \n    nb_jobs::Int\n    release_times::Vector{T}\n    processing_times::Vector{T}\nend\n\n\n\n\n\n","category":"type"},{"location":"api/#SingleMachineScheduling.aprtf-Union{Tuple{Instance1_rj_sumCj{T}}, Tuple{T}} where T","page":"API","title":"SingleMachineScheduling.aprtf","text":"function aprtf(inst::Instance1_rj_sumCj{T}) where {T}\n\nImplements aprtf as in Chu, 1992, Efficient heuristics to minimize total flowtime with release dates. See this reference for the notations and the details of the algorithm\n\nreturns obj_value, sol\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.build_and_solve_instance-Tuple{}","page":"API","title":"SingleMachineScheduling.build_and_solve_instance","text":"build_and_solve_instance(;seed=0,nb_jobs=50,range=0.8, solver=milp_solver, load_and_save=true)\n\nFunction that \n\n- builds an instance `inst`\n- solve the instance with `solver` to compute a solution and its value `val`\n- returns `inst,val`\n\nIf load_and_save is set to true, the solution is loaded from the disk (if the solution file already exists), or computed and saved to the disk (if the solution file doesn't exit)\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.build_instance_1_rj_sumCj-Tuple{}","page":"API","title":"SingleMachineScheduling.build_instance_1_rj_sumCj","text":"function build_instance_1_rj_sumCj(;seed::Int=0,nb_jobs::Int=10,range::Float64=0.8)\n\ngenerates an Instance1_rj_sumCj{T} instance with nb_jobs jobs\n\nseed is an Integer\nrange is a float between 0.2 and 3 typically. Most difficult instances are obtained with range around 0.8\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.build_solve_and_encode_instance-Tuple{}","page":"API","title":"SingleMachineScheduling.build_solve_and_encode_instance","text":"function build_solve_and_encode_instance(;seed=0,nb_jobs=50,range=0.8, solver=milp_solver, load_and_save=true)\n\nFunction that \n\n- builds an instance `inst`\n- compute its embedding `x`\n- solve the instance with `solver` to compute a solution\n- computes the embedding `y` of the solution computed by `solver`\n- computes the value `val` of the solution\n- returns `x,y,inst,val`\n\nIf load_and_save is set to true, the solution is loaded from the disk (if the solution file already exists), or computed and saved to the disk (if the solution file doesn't exit)\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.embedding_to_sequence-Tuple{AbstractVector}","page":"API","title":"SingleMachineScheduling.embedding_to_sequence","text":"function embedding_to_sequence(y::AbstractVector)\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.encoder_1_rj_sumCj-Union{Tuple{Instance1_rj_sumCj{T}}, Tuple{T}} where T","page":"API","title":"SingleMachineScheduling.encoder_1_rj_sumCj","text":"function encoder_1_rj_sumCj(inst::Instance1_rj_sumCj{T}) where {T}\n\nreturns a 27 * inst.nb_jobs matrix with the value of the features\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.evaluate_solution_1_rj_sumCj-Union{Tuple{I}, Tuple{Instance1_rj_sumCj, Vector{I}}} where I<:Integer","page":"API","title":"SingleMachineScheduling.evaluate_solution_1_rj_sumCj","text":"function evaluate_solution_1_rj_sumCj(inst::Instance1_rj_sumCj,sol::Vector{I}) where {I <: Integer}\n\nreturns the objective value for the solution (permutation of the indices) encoded in sol\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.fast_local_descent_1_rj_sumCj!-Union{Tuple{T}, Tuple{Instance1_rj_sumCj{T}, AbstractVector}} where T","page":"API","title":"SingleMachineScheduling.fast_local_descent_1_rj_sumCj!","text":"function fastlocaldescent1rjsumCj!(inst::Instance1rj_sumCj,sol::Vector{I}) where {I}\n\nPerforms a fast local descent on the solution sol of instance inst. Solution sol is modified and contains the result at the end.\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.fast_local_descent_1_rj_sumCj-Union{Tuple{T}, Tuple{Instance1_rj_sumCj{T}, AbstractVector}} where T","page":"API","title":"SingleMachineScheduling.fast_local_descent_1_rj_sumCj","text":"function fastlocaldescent1rjsumCj(inst::Instance1rj_sumCj,sol::Vector{I}) where {I}\n\nDecoder version of fast_local_descent_1_rj_sumCj!\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.milp_solve_1_rj_sumCj-Union{Tuple{Instance1_rj_sumCj{T}}, Tuple{T}} where T","page":"API","title":"SingleMachineScheduling.milp_solve_1_rj_sumCj","text":"function milp_solve_1_rj_sumCj(\n    inst::Instance1_rj_sumCj{T}; \n    srpt_cuts=true, \n    MILP_solver=GLPK.Optimizer\n) where {T}\n\nreturns objective_value(model), solution where solution is a permutation enoced as a Vector{Int}\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.nb_features_encoder-Tuple{Any}","page":"API","title":"SingleMachineScheduling.nb_features_encoder","text":"function nb_features_encoder(encoder)\n\nreturns the number of features used by the encoder\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.prtf-Union{Tuple{T}, Tuple{Instance1_rj_sumCj{T}, T, Any}} where T","page":"API","title":"SingleMachineScheduling.prtf","text":"prtf(inst::Instance1_rj_sumCj{T}, current_time::T, job_index) where {T}\n\nPriority Rule for Total Flowtime (PRTF)\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.rdi!-Union{Tuple{T}, Tuple{Instance1_rj_sumCj{T}, AbstractVector, AbstractVector}} where T","page":"API","title":"SingleMachineScheduling.rdi!","text":"function rdi!(\n\tinst::Instance1_rj_sumCj{T}, \n\tdispatching_rule::AbstractVector, \n\tsol::AbstractVector\n) where {T}\n\nRelease Date Iteration heuristic\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.rdi-Union{Tuple{T}, Tuple{Instance1_rj_sumCj{T}, AbstractVector}} where T","page":"API","title":"SingleMachineScheduling.rdi","text":"function rdi(\n\tinst::Instance1_rj_sumCj{T}, \n\tsol::AbstractVector\n) where {T}\n\nDecoder version of rdi. Sol is used both as starting point and as guiding heuristic for rdi\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.rdi_aptrf-Tuple{Instance1_rj_sumCj}","page":"API","title":"SingleMachineScheduling.rdi_aptrf","text":"function rdi_aptrf(inst::Instance1_rj_sumCj)\n\nruns rdi on inst with aptrf dispatching rule \n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.remove!-Tuple{Any, Any}","page":"API","title":"SingleMachineScheduling.remove!","text":"function remove!(a, item)\n\nremoves all occurences of item in a\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.sequence_to_embedding-Union{Tuple{Vector{I}}, Tuple{I}} where I<:Int64","page":"API","title":"SingleMachineScheduling.sequence_to_embedding","text":"function sequence_to_embedding(seq::Vector{I}) where {I <: Int}\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.solver_name-Tuple{Any}","page":"API","title":"SingleMachineScheduling.solver_name","text":"solver_name(solver)\n\nreturns the name of solver used for logging purpose\n\n\n\n\n\n","category":"method"},{"location":"api/#SingleMachineScheduling.srpt_1_rj_sumCj-Union{Tuple{Instance1_rj_sumCj{T}}, Tuple{T}} where T","page":"API","title":"SingleMachineScheduling.srpt_1_rj_sumCj","text":"function srpt_1_rj_sumCj(inst::Instance1_rj_sumCj{T}) where {T}\n\ncomputes the preemptive solution of inst, and returns\n\nstruct Preemptive_solution_1_rj_sumCj{T}\n    obj_value::T\n    job_sequence::Vector{Int}\n    processing_time_sequence::Vector{T}\n    completion_times::Vector{T}\nend\n\nwhere obj_value is the preemptive objective value\n\n\n\n\n\n","category":"method"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"EditURL = \"<unknown>/test/experiments.jl\"","category":"page"},{"location":"experiments/#Learning-algorithms-for-1r_j\\sum-C_j","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"using SingleMachineScheduling\nusing Flux\nusing InferOpt\nusing UnicodePlots\nusing ProgressMeter","category":"page"},{"location":"experiments/#Solution-pipeline","page":"Learning algorithms for 1r_jsum C_j","title":"Solution pipeline","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Select the encoder. Encoders available","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"encoder_1_rj_sumCj","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"encoder = encoder_1_rj_sumCj\nnb_features = nb_features_encoder(encoder);","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Select the model","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"model = Chain(Dense(nb_features,1,bias=false),X->dropdims(X,dims=1));","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Select the decoder.","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Decoders available","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"(inst,y) -> y: no decoder\ndecoder = fast_local_descent_1_rj_sumCj\ndecoder = (inst,y) -> rdi(inst,fast_local_descent_1_rj_sumCj(inst,y))","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"decoder = (inst,y) -> y;\n\n#=\nSolution pipeline\n=#\n\npipeline(inst) = decoder(inst,embedding_to_sequence(ranking(model(encoder(inst)))));","category":"page"},{"location":"experiments/#Training-set","page":"Learning algorithms for 1r_jsum C_j","title":"Training set","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Instances in the training set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"seeds = 1:10;\nnb_jobs = 50:10:100;\nranges = 0.2:0.2:1.4;","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Utils, do not modify, can be commented if you don't want to use gurobi","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"using Gurobi\nenv = Gurobi.Env()\ngurobi_solver = () -> Gurobi.Optimizer(env)\n\nfunction gurobi_1_rj_sumCj(inst::Instance1_rj_sumCj)\n    return milp_solve_1_rj_sumCj(inst,MILP_solver=gurobi_solver)\nend\nSingleMachineScheduling.solver_name(sol::typeof(gurobi_1_rj_sumCj)) = \"gurobi\";","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"\n--------------------------------------------\nWarning: your license will expire in 13 days\n--------------------------------------------\n\nAcademic license - for non-commercial use only\n","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Solution algorithm used to build the solution of instances in the training set. Algorithms available:","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"glpk_1_rj_sumCj: exact\ngurobi_1_rj_sumCj: exact\nrdi_aptrf: heuristic","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"solver = gurobi_1_rj_sumCj;","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Builds the training set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"training_data = [build_solve_and_encode_instance(seed=s, nb_jobs=n ,range=r, solver=solver, load_and_save=true) for s in seeds for n in nb_jobs for r in ranges];","category":"page"},{"location":"experiments/#Test-set","page":"Learning algorithms for 1r_jsum C_j","title":"Test set","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Select the instances in the test set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"seeds = 50:60;\nnb_jobs = 50:10:100;\nranges = 0.2:0.2:1.4;","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Select the benchmark algorithm used on the test set. Same algorithms available as for training set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"solver = rdi_aptrf;","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Build the test set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"test_data = [build_solve_and_encode_instance(seed=s, nb_jobs=n ,range=r, solver=solver, load_and_save=true) for s in seeds for n in nb_jobs for r in ranges];","category":"page"},{"location":"experiments/#Learning","page":"Learning algorithms for 1r_jsum C_j","title":"Learning","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Computes features sd","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"count_dim = 0\nfeatures_mean = zeros(nb_features)\nfor (x,_,inst,_) in training_data\n    global count_dim += inst.nb_jobs\n    for j in 1:inst.nb_jobs\n        for f in 1:nb_features\n            features_mean[f] += x[f,j]\n        end\n    end\nend\nfeatures_mean /= count_dim\nfeatures_sd = zeros(nb_features)\nfor (x,_,inst,_) in training_data\n    for j in 1:inst.nb_jobs\n        for f in 1:nb_features\n            features_sd[f] += (x[f,j] - features_mean[f])^2\n        end\n    end\nend\nfeatures_sd = sqrt.(features_sd);","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Definition of standardization layer","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"struct Standardize_layer\n    sd_inv::Vector{Float64}\nend\n\nfunction (sl::Standardize_layer)(x::AbstractMatrix)\n    (nf,nj) = size(x)\n    @assert nf == length(sl.sd_inv)\n    res = zeros(nf,nj)\n    for j in 1:nj\n        for f in 1:nf\n            res[f,j] = x[f,j] * sl.sd_inv[f]\n        end\n    end\n    return res\nend","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Activate the standardization layer","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"features_sd_inv = (x->1/x).(features_sd)\nsd_layer = Standardize_layer(features_sd_inv);","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"We desactivate the standardization layer for these specific experiments (comment the following block to activate it)","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"sd_layer = Standardize_layer(ones(nb_features));","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Loss","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"regularized_predictor = Perturbed(ranking; ε = 1.0, M=20)\nloss = FenchelYoungLoss(regularized_predictor);","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Learning","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"std_training_data = [(sd_layer(x),y,inst,val) for (x,y,inst,val) in training_data]\nstd_test_data = [(sd_layer(x),y,inst,val) for (x,y,inst,val) in test_data]\n\nopt = ADAM();\nfyl_losses = Float64[]\nobj_train_losses = Float64[]\nobj_test_losses = Float64[]\npartial_pipeline = Chain(model,ranking,embedding_to_sequence)\nfor epoch in 1:300\n    fyl_l = 0.\n    obj_train_l = 0.\n    for (x_std, y,inst,val) in std_training_data\n        grads = gradient(Flux.params(model)) do\n            fyl_l += loss(model(x_std), y)\n        end\n        obj_train_l += (evaluate_solution_1_rj_sumCj(inst,partial_pipeline(x_std)) - val) / val\n        Flux.update!(opt, Flux.params(model), grads)\n    end\n    obj_train_l /= length(training_data)\n    push!(fyl_losses, fyl_l)\n    push!(obj_train_losses, obj_train_l)\n\n    obj_test_l = 0.0\n    for (x,y,inst,val) in std_test_data\n        obj_test_l += (evaluate_solution_1_rj_sumCj(inst,partial_pipeline(x)) - val) / val\n    end\n    obj_test_l /= length(std_test_data)\n    push!(obj_test_losses,obj_test_l)\nend;","category":"page"},{"location":"experiments/#Learning-results.","page":"Learning algorithms for 1r_jsum C_j","title":"Learning results.","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Curves giving the Fenchel Young loss (convex loss used for learning) on the training set and the objective value on the training and test set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Fenchel Young loss","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"lineplot(fyl_losses[10:length(fyl_losses)], xlabel=\"Epoch\", ylabel=\"FY Loss\")","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"                  ┌────────────────────────────────────────┐ \n           300000 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   FY Loss        │⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⢱⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⠀⠙⠦⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⠀⠀⠀⠈⠉⠙⠛⠓⠓⠓⠻⠒⠒⠶⠖⠖⠖⠖⠶⠖⠓⠶⠾⠶⠞⠖⠳⠶⠶⠟⠖⠲⠒⠶⠾⠲⠶⠀│ \n                  │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                  └────────────────────────────────────────┘ \n                  ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀300⠀ \n                  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Epoch⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Loss on the training set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"lineplot(obj_train_losses[10:length(fyl_losses)], xlabel=\"Epoch\", ylabel=\"Obj train Loss\")","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"                      ┌────────────────────────────────────────┐ \n                  0.2 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   Obj train Loss     │⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⠀⠈⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⠀⠀⠈⠳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                      │⠀⠀⠀⠀⠀⠈⠓⠢⠤⣤⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                    0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀│ \n                      └────────────────────────────────────────┘ \n                      ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀300⠀ \n                      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Epoch⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Loss on the test set","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"lineplot(obj_test_losses[10:length(fyl_losses)], xlabel=\"Epoch\", ylabel=\"Obj test Loss\")","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"                     ┌────────────────────────────────────────┐ \n                 0.2 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n   Obj test Loss     │⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⠀⠈⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                     │⠀⠀⠀⠀⠀⠈⠙⠒⠦⢤⣄⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n                   0 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀│ \n                     └────────────────────────────────────────┘ \n                     ⠀0⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀300⠀ \n                     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀Epoch⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ","category":"page"},{"location":"experiments/#Benchmark","page":"Learning algorithms for 1r_jsum C_j","title":"Benchmark","text":"","category":"section"},{"location":"experiments/#Learned-model-performance","page":"Learning algorithms for 1r_jsum C_j","title":"Learned model performance","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"function test_pipeline_on_training_and_test_set(name, pipeline)\n    data_sets = [(\"train\",training_data),(\"test\",test_data)];\n\n    for (data_name,data_set) in data_sets\n        gaps = Float64[]\n        gap = 0.\n        for (_,_,inst,val) in data_set\n            gap = (evaluate_solution_1_rj_sumCj(inst,pipeline(inst)) - val) / val;\n            push!(gaps, gap);\n        end\n        println(histogram(gaps,nbins=10,name=name * \" \" * data_name))\n        println(sum(gaps)/length(gaps))\n    end\nend\n\nfunction test_model_on_training_and_test_set(model_name, model)\n\n    pipeline_without_decoder(inst) = embedding_to_sequence(ranking(model(sd_layer(encoder(inst)))))\n\n    decoders = [\n        (model_name * \"no_decoder\",(inst,y) -> y),\n        (model_name * \"local\",fast_local_descent_1_rj_sumCj),\n        (model_name * \"rdi\",(inst,y) -> rdi(inst,fast_local_descent_1_rj_sumCj(inst,y)))\n    ]\n    pipelines = [(name,inst -> decoder(inst, pipeline_without_decoder(inst))) for (name,decoder) in decoders]\n\n    for (name, pipeline) in pipelines\n        test_pipeline_on_training_and_test_set(name,pipeline)\n    end\nend\n\ntest_model_on_training_and_test_set(\"learned model \" , model)","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"                ┌                                        ┐                               \n   [0.0 , 0.01) ┤███████████████████████████████████  165  learned model no_decoder train\n   [0.01, 0.02) ┤███████████████████████████████▎ 147                                    \n   [0.02, 0.03) ┤███████████████▏ 71                                                     \n   [0.03, 0.04) ┤█████▌ 26                                                               \n   [0.04, 0.05) ┤█▊ 9                                                                    \n   [0.05, 0.06) ┤  0                                                                     \n   [0.06, 0.07) ┤  0                                                                     \n   [0.07, 0.08) ┤▌ 2                                                                     \n                └                                        ┘                               \n                                 Frequency                                               \n0.014557739228648524\n                  ┌                                        ┐                              \n   [-0.01,  0.0 ) ┤██▍ 14                                    learned model no_decoder test\n   [ 0.0 ,  0.01) ┤███████████████████████████████████  214                               \n   [ 0.01,  0.02) ┤████████████████████████▌ 150                                          \n   [ 0.02,  0.03) ┤██████████▋ 65                                                         \n   [ 0.03,  0.04) ┤█▊ 11                                                                  \n   [ 0.04,  0.05) ┤▋ 4                                                                    \n   [ 0.05,  0.06) ┤▌ 3                                                                    \n   [ 0.06,  0.07) ┤  0                                                                    \n   [ 0.07,  0.08) ┤  0                                                                    \n   [ 0.08,  0.09) ┤  0                                                                    \n   [ 0.09,  0.1 ) ┤▎ 1                                                                    \n                  └                                        ┘                              \n                                   Frequency                                              \n0.01219254155420144\n                ┌                                        ┐                          \n   [0.0 , 0.01) ┤███████████████████████████████████  212  learned model local train\n   [0.01, 0.02) ┤█████████████████████████▎ 152                                     \n   [0.02, 0.03) ┤███████▎ 43                                                        \n   [0.03, 0.04) ┤█▋ 10                                                              \n   [0.04, 0.05) ┤▎ 1                                                                \n   [0.05, 0.06) ┤  0                                                                \n   [0.06, 0.07) ┤▍ 2                                                                \n                └                                        ┘                          \n                                 Frequency                                          \n0.011084772514537483\n                  ┌                                        ┐                         \n   [-0.02, -0.01) ┤▍ 2                                       learned model local test\n   [-0.01,  0.0 ) ┤███▏ 23                                                           \n   [ 0.0 ,  0.01) ┤███████████████████████████████████  263                          \n   [ 0.01,  0.02) ┤██████████████████▋ 140                                           \n   [ 0.02,  0.03) ┤███▉ 30                                                           \n   [ 0.03,  0.04) ┤▎ 1                                                               \n   [ 0.04,  0.05) ┤▍ 3                                                               \n                  └                                        ┘                         \n                                   Frequency                                         \n0.00868317232381912\n                  ┌                                        ┐                        \n   [0.0  , 0.005) ┤███████████████████████████████████  372  learned model rdi train\n   [0.005, 0.01 ) ┤██▊ 31                                                           \n   [0.01 , 0.015) ┤█▍ 15                                                            \n   [0.015, 0.02 ) ┤  0                                                              \n   [0.02 , 0.025) ┤▎ 2                                                              \n                  └                                        ┘                        \n                                   Frequency                                        \n0.002515767000202535\n                    ┌                                        ┐                       \n   [-0.025, -0.02 ) ┤▎ 1                                       learned model rdi test\n   [-0.02 , -0.015) ┤▎ 2                                                             \n   [-0.015, -0.01 ) ┤▍ 3                                                             \n   [-0.01 , -0.005) ┤█▍ 13                                                           \n   [-0.005,  0.0  ) ┤███████▎ 74                                                     \n   [ 0.0  ,  0.005) ┤███████████████████████████████████  360                        \n   [ 0.005,  0.01 ) ┤▊ 8                                                             \n   [ 0.01 ,  0.015) ┤  0                                                             \n   [ 0.015,  0.02 ) ┤▎ 1                                                             \n                    └                                        ┘                       \n                                     Frequency                                       \n0.00018478607912945626\n","category":"page"},{"location":"experiments/#Benchmark-againt-RDI-APTRF","page":"Learning algorithms for 1r_jsum C_j","title":"Benchmark againt RDI APTRF","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"function rdia(inst)\n    _,sol = rdi_aptrf(inst)\n    return sol\nend\n\ntest_pipeline_on_training_and_test_set(\"RDI APTRF\", rdia)","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"                  ┌                                        ┐                \n   [0.0  , 0.005) ┤███████████████████████████████████  380  RDI APTRF train\n   [0.005, 0.01 ) ┤█▌ 17                                                    \n   [0.01 , 0.015) ┤█▏ 11                                                    \n   [0.015, 0.02 ) ┤▊ 9                                                      \n   [0.02 , 0.025) ┤▎ 1                                                      \n   [0.025, 0.03 ) ┤▎ 2                                                      \n                  └                                        ┘                \n                                   Frequency                                \n0.0023261444095230587\n              ┌                                        ┐               \n   [0.0, 1.0) ┤███████████████████████████████████  462  RDI APTRF test\n              └                                        ┘               \n                               Frequency                               \n0.0\n","category":"page"},{"location":"experiments/#Comparison-to-a-random-model","page":"Learning algorithms for 1r_jsum C_j","title":"Comparison to a random model","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"This enables to check that the post-processing used are not enough alone to get the performance we have.","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"model_random = Chain(Dense(nb_features,1,bias=false),X->dropdims(X,dims=1))\ntest_model_on_training_and_test_set(\"random model \", model_random)","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"              ┌                                        ┐                              \n   [0.8, 1.0) ┤█▊ 6                                      random model no_decoder train\n   [1.0, 1.2) ┤██████████  34                                                         \n   [1.2, 1.4) ┤████████████████████▊ 71                                               \n   [1.4, 1.6) ┤████████████████████████████████▉ 112                                  \n   [1.6, 1.8) ┤███████████████████████████████████  119                               \n   [1.8, 2.0) ┤██████████████████▌ 63                                                 \n   [2.0, 2.2) ┤███▌ 12                                                                \n   [2.2, 2.4) ┤▊ 3                                                                    \n              └                                        ┘                              \n                               Frequency                                              \n1.5625934749446024\n              ┌                                        ┐                             \n   [0.8, 1.0) ┤███▎ 14                                   random model no_decoder test\n   [1.0, 1.2) ┤██████████▌ 46                                                        \n   [1.2, 1.4) ┤████████████████▍ 72                                                  \n   [1.4, 1.6) ┤███████████████████████████████████  154                              \n   [1.6, 1.8) ┤████████████████████████████████▌ 143                                 \n   [1.8, 2.0) ┤██████▊ 30                                                            \n   [2.0, 2.2) ┤▋ 3                                                                   \n              └                                        ┘                             \n                               Frequency                                             \n1.5046112027535476\n              ┌                                        ┐                         \n   [0.0, 0.2) ┤▍ 1                                       random model local train\n   [0.2, 0.4) ┤█████▋ 18                                                         \n   [0.4, 0.6) ┤██████████████▊ 47                                                \n   [0.6, 0.8) ┤█████████████▎ 42                                                 \n   [0.8, 1.0) ┤████████████████▋ 53                                              \n   [1.0, 1.2) ┤███████████████████████████████████  111                          \n   [1.2, 1.4) ┤████████████████████████████████▊ 104                             \n   [1.4, 1.6) ┤████████████▉ 41                                                  \n   [1.6, 1.8) ┤▉ 3                                                               \n              └                                        ┘                         \n                               Frequency                                         \n1.0163335483214315\n              ┌                                        ┐                        \n   [0.2, 0.4) ┤██████▎ 30                                random model local test\n   [0.4, 0.6) ┤█████████▏ 44                                                    \n   [0.6, 0.8) ┤██████████▍ 50                                                   \n   [0.8, 1.0) ┤████████████▉ 63                                                 \n   [1.0, 1.2) ┤███████████████████████████████████  170                         \n   [1.2, 1.4) ┤███████████████████▌ 95                                          \n   [1.4, 1.6) ┤██▏ 10                                                           \n              └                                        ┘                        \n                               Frequency                                        \n0.9698502112215877\n                ┌                                        ┐                       \n   [0.0 , 0.02) ┤███████████████████████████████████  288  random model rdi train\n   [0.02, 0.04) ┤████▋ 38                                                        \n   [0.04, 0.06) ┤██▋ 22                                                          \n   [0.06, 0.08) ┤██▊ 23                                                          \n   [0.08, 0.1 ) ┤██▌ 20                                                          \n   [0.1 , 0.12) ┤█▊ 15                                                           \n   [0.12, 0.14) ┤▎ 2                                                             \n   [0.14, 0.16) ┤▋ 5                                                             \n   [0.16, 0.18) ┤▋ 6                                                             \n   [0.18, 0.2 ) ┤▎ 1                                                             \n                └                                        ┘                       \n                                 Frequency                                       \n0.02609663976506764\n                ┌                                        ┐                      \n   [-0.1,  0.0) ┤█████▌ 55                                 random model rdi test\n   [ 0.0,  0.1) ┤███████████████████████████████████  349                       \n   [ 0.1,  0.2) ┤███▍ 33                                                        \n   [ 0.2,  0.3) ┤▎ 2                                                            \n   [ 0.3,  0.4) ┤▊ 8                                                            \n   [ 0.4,  0.5) ┤█▎ 11                                                          \n   [ 0.5,  0.6) ┤▍ 4                                                            \n                └                                        ┘                      \n                                 Frequency                                      \n0.04593212499919188\n","category":"page"},{"location":"experiments/#Check-with-values-from-paper","page":"Learning algorithms for 1r_jsum C_j","title":"Check with values from paper","text":"","category":"section"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"Test the performance of the different pipelines on the test set and on the training set with statistical model weights coming from previous work. Enables to benchmark the weights learned above.","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"weights = [9.506266089662077, -1.3710315054206788,  0.1334585280839313, -12.717671717074401, -31.393832945142343, -65.99076384998047, 2727.5046035932914, 61.883341118377146, 20.013854704894786, -306.89057967968387, 11.016281079036249, -33.77663126876743, 2246.5767196831075, 75.12578950854285, -16.140917318465277, -10.391296995373096, 23.56958788377952,  0.2345640964855094, 73.68335584637983, -1.6562121307640043, -244.85450540859512, -41.84024227378858, 89.32668553827389, 14.394554937735686, -206.2433702076072, 46.13339975880264, -56.350659387437126]\nmodel_paper = Chain(Dense(weights',false),X->dropdims(X,dims=1))\n\ntest_model_on_training_and_test_set(\"paper model \", model_paper)","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"                ┌                                        ┐                             \n   [0.0 , 0.02) ┤███▊ 15                                   paper model no_decoder train\n   [0.02, 0.04) ┤█████████▏ 35                                                         \n   [0.04, 0.06) ┤███████████████▊ 61                                                   \n   [0.06, 0.08) ┤███████████████████████████████████  135                              \n   [0.08, 0.1 ) ┤█████████████████████████▋ 99                                         \n   [0.1 , 0.12) ┤███████████▉ 46                                                       \n   [0.12, 0.14) ┤████▍ 17                                                              \n   [0.14, 0.16) ┤█▊ 7                                                                  \n   [0.16, 0.18) ┤▊ 3                                                                   \n   [0.18, 0.2 ) ┤▌ 2                                                                   \n                └                                        ┘                             \n                                 Frequency                                             \n0.07576496837960733\n                  ┌                                        ┐                            \n   [-0.02,  0.0 ) ┤▊ 3                                       paper model no_decoder test\n   [ 0.0 ,  0.02) ┤█████▍ 19                                                            \n   [ 0.02,  0.04) ┤████████████▊ 46                                                     \n   [ 0.04,  0.06) ┤████████████████████████▋ 88                                         \n   [ 0.06,  0.08) ┤███████████████████████████████████  125                             \n   [ 0.08,  0.1 ) ┤█████████████████████████████████▊ 121                               \n   [ 0.1 ,  0.12) ┤██████████▉ 39                                                       \n   [ 0.12,  0.14) ┤█████▍ 19                                                            \n   [ 0.14,  0.16) ┤  0                                                                  \n   [ 0.16,  0.18) ┤▌ 2                                                                  \n                  └                                        ┘                            \n                                   Frequency                                            \n0.07044254023365457\n                ┌                                        ┐                        \n   [0.0 , 0.01) ┤███████████████████████████████████  369  paper model local train\n   [0.01, 0.02) ┤██▊ 29                                                           \n   [0.02, 0.03) ┤▌ 5                                                              \n   [0.03, 0.04) ┤▊ 8                                                              \n   [0.04, 0.05) ┤▌ 5                                                              \n   [0.05, 0.06) ┤▎ 2                                                              \n   [0.06, 0.07) ┤▎ 2                                                              \n                └                                        ┘                        \n                                 Frequency                                        \n0.004613449375132551\n                  ┌                                        ┐                       \n   [-0.03, -0.02) ┤▎ 1                                       paper model local test\n   [-0.02, -0.01) ┤█▋ 11                                                           \n   [-0.01,  0.0 ) ┤█████████████████████████▌ 168                                  \n   [ 0.0 ,  0.01) ┤███████████████████████████████████  231                        \n   [ 0.01,  0.02) ┤████▎ 28                                                        \n   [ 0.02,  0.03) ┤█▍ 9                                                            \n   [ 0.03,  0.04) ┤▌ 3                                                             \n   [ 0.04,  0.05) ┤▊ 6                                                             \n   [ 0.05,  0.06) ┤▌ 3                                                             \n   [ 0.06,  0.07) ┤▎ 1                                                             \n   [ 0.07,  0.08) ┤▎ 1                                                             \n                  └                                        ┘                       \n                                   Frequency                                       \n0.0027501374607042054\n                  ┌                                        ┐                      \n   [0.0  , 0.001) ┤███████████████████████████████████  235  paper model rdi train\n   [0.001, 0.002) ┤████████████████▉ 114                                          \n   [0.002, 0.003) ┤███████▍ 49                                                    \n   [0.003, 0.004) ┤██▎ 14                                                         \n   [0.004, 0.005) ┤▎ 1                                                            \n   [0.005, 0.006) ┤▌ 3                                                            \n   [0.006, 0.007) ┤▍ 2                                                            \n   [0.007, 0.008) ┤  0                                                            \n   [0.008, 0.009) ┤  0                                                            \n   [0.009, 0.01 ) ┤▎ 1                                                            \n   [0.01 , 0.011) ┤▎ 1                                                            \n                  └                                        ┘                      \n                                   Frequency                                      \n0.0011762948716585167\n                    ┌                                        ┐                     \n   [-0.025, -0.02 ) ┤▎ 1                                       paper model rdi test\n   [-0.02 , -0.015) ┤▋ 4                                                           \n   [-0.015, -0.01 ) ┤█▍ 8                                                          \n   [-0.01 , -0.005) ┤███▊ 23                                                       \n   [-0.005,  0.0  ) ┤██████████████████████████████████▋ 210                       \n   [ 0.0  ,  0.005) ┤███████████████████████████████████  212                      \n   [ 0.005,  0.01 ) ┤▌ 3                                                           \n   [ 0.01 ,  0.015) ┤  0                                                           \n   [ 0.015,  0.02 ) ┤▎ 1                                                           \n                    └                                        ┘                     \n                                     Frequency                                     \n-0.001012941597738036\n","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"","category":"page"},{"location":"experiments/","page":"Learning algorithms for 1r_jsum C_j","title":"Learning algorithms for 1r_jsum C_j","text":"This page was generated using Literate.jl.","category":"page"},{"location":"milp/#Exact-MILP-formulation-for-1r_j\\sum_j-C_j","page":"Exact MILP","title":"Exact MILP formulation for 1r_jsum_j C_j","text":"","category":"section"},{"location":"milp/#MILP-formulation","page":"Exact MILP","title":"MILP formulation","text":"","category":"section"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"We introduce the following formulation for 1r_jsum_j C_j","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    tagMILP \n    beginarrayrll\n        displaystylemin_xC   displaystyle sum_j=1^n C_j \n        mathrmst  \n         displaystyle sum_j =1^n x_ij = 1  textfor all  i in 1ldotsn \n         displaystyle sum_i =1^n x_ij = 1  textfor all  j in 1ldotsn \n         C_1 geq displaystyle sum_i (p_i + r_i) x_i1 \n         C_j geq C_j-1 + displaystyle sum_i p_i x_ij  textfor all  j in 2ldotsn \n         C_j geq displaystyle sum_i (p_i + r_i) x_ij  textfor all  j in 2ldotsn \n         x in 01\n    endarray","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"where x_ij indicates if job i is in position j, and C_j is the completion time of the job in position j.","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"This MILP is implemented in function SingleMachineScheduling.Instance1_rj_sumCj","category":"page"},{"location":"milp/#Valid-cuts-from-SRPT","page":"Exact MILP","title":"Valid cuts from SRPT","text":"","category":"section"},{"location":"milp/#Preemptive-version-1r_j,-preemp\\sum_j-C_j","page":"Exact MILP","title":"Preemptive version 1r_j preempsum_j C_j","text":"","category":"section"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"In the preemptive version of 1r_jsum_j C_j, a job can be interrupted at any moment, to operate another job, and finished later, restarting from where it has been interrupted. A solution of the preemptive problem can therefore be encoded as a sequence of jobs j_1ldotsj_m which may contain repetitions (and do contain repetitions on many optimal solutions) and a sequence q_1ldotsq_m of processing times, where q_k gives the time spent on the machine by job j_k at that moment. We therefore have","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    sum_kcolon j_k = i q_k = p_i quad textfor each job i","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"Let S be such a solution. Let D_k be that time at which operation in position k is finished. We have","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    beginarrayrl\n        D_1^S = r_j_1 + q_1 \n        D_k^S = max(r_j_k D_k-1) + q_k quad textfor k1\n    endarray","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"The completion time of job i is then","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    C_i^S = D_k_i quad textwhere quad k_i = max","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"Given the ordering tilde i_1ldotstilde i_n f the jobs by increasing C_i^S, we have","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    C_j^S = C_i_j^S","category":"page"},{"location":"milp/#SRPT","page":"Exact MILP","title":"SRPT","text":"","category":"section"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"The preemptive version can be solved with the shortest remaining processing time (SRPT) dispatching rule. The solution (j_1ldotsj_k) (q_1ldotsq_k) is built iteratively At time k, the job i with the shortest remaining processing time","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    p_i - sum_h in 1ldotsk-1 colon j_h=i q_h","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"is scheduled is position k. Preemption happens if a job with shorter remaining processing time is released before the completion of i.","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"Let S be the solution of 1r_j preempsum_j C_j  returned by SRPT q_1ldotsq_m.  Let C_j be the completion time of an optimal solution of the non-preemptive version 1r_jsum_j C_j. It can be shown that","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"    C_j geq C_j^S","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"Remark that j does not refer to the same job in C_j and C_j^S. This equation can be introduced as a valid cut in the MILP formulation (MILP). Note that in that case C_j is a variable, while and C_j^S is a precomputed constant. This cut is implemented by default in This MILP is implemented in function SingleMachineScheduling.Instance1_rj_sumCj. It can be removed using the keyword argument srpt_cuts=false.","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"Improved SRPT cuts can be proposed, but we did not implement them ","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"Improving the preemptive bound for the one-machine dynamic total completion time scheduling problem","category":"page"},{"location":"milp/","page":"Exact MILP","title":"Exact MILP","text":"A hybrid heuristic approach for single machine scheduling with release times","category":"page"},{"location":"heuristics/#Combinatorial-heuristics-for-1r_j\\sum-C_j","page":"Heuristics","title":"Combinatorial heuristics for 1r_jsum C_j","text":"","category":"section"},{"location":"heuristics/#Dispatching-rules","page":"Heuristics","title":"Dispatching rules","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Dispatching rules are used within a greedy algorithm that, given the current","category":"page"},{"location":"heuristics/#Basic-dispatching-rules","page":"Heuristics","title":"Basic dispatching rules","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Take into account only properties of the job.","category":"page"},{"location":"heuristics/#Priority-Rule-for-Total-Flowtime-(PRTF)","page":"Heuristics","title":"Priority Rule for Total Flowtime (PRTF)","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Takes into account properties of the remaining jobs and current time.","category":"page"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Implemented in SingleMachineScheduling.prtf","category":"page"},{"location":"heuristics/#Altnernative-Priority-Rule-for-Total-Flowtime-(APRTF)","page":"Heuristics","title":"Altnernative Priority Rule for Total Flowtime (APRTF)","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Takes into account properties of current time and all the remaining job.","category":"page"},{"location":"heuristics/#APTRF","page":"Heuristics","title":"APTRF","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Implemented in SingleMachineScheduling.aprtf","category":"page"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Chu, 1992, Efficient heuristics to minimize total flowtime with release dates","category":"page"},{"location":"heuristics/#Local-descent","page":"Heuristics","title":"Local descent","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Implemented in SingleMachineScheduling.fast_local_descent_1_rj_sumCj!","category":"page"},{"location":"heuristics/#Release-Date-Iteration-heuristic","page":"Heuristics","title":"Release Date Iteration heuristic","text":"","category":"section"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Implemented in SingleMachineScheduling.rdi!","category":"page"},{"location":"heuristics/","page":"Heuristics","title":"Heuristics","text":"Chand et al., 1996, An iterative heuristic for the single machine dynamic total completion time scheduling problem","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SingleMachineScheduling","category":"page"},{"location":"#SingleMachineScheduling","page":"Home","title":"SingleMachineScheduling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SingleMachineScheduling.","category":"page"}]
}
